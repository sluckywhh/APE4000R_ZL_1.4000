/*
 * wmmp.h
 *
 *  Created on: 2010-3-10
 *      Author: Administrator
 */

#ifndef WMMP_H_
#define WMMP_H_

#ifdef __cplusplus
extern "C"
{
#endif

#define APP_SERVER_MAX				15
#define APP_SEND_PACKET_MAXLEN		4096
#define APP_RECV_PACKET_MAXLEN		4096
#define APPDATA_MAX_RECEIVE_LEN		8192
#define APPDATA_MAX_TRANSMIT_LEN	8192

//error code define
#define ERROR_WMMP_NOT_READY		1
#define ERROR_WMMP_BAD_RESPONSE		2
#define ERROR_WMMP_BAD_ACK			3
#define ERROR_WMMP_SERVER_ERROR		4
#define ERROR_WMMP_APPSEND_FAILED	5
#define ERROR_WMMP_APPREAD_FAILED	6
#define ERROR_WMMP_APPREAD_OVERFLOW	7
#define ERROR_WMMP_UNKOWN			8



//typedef enum
//{
//	IDLE = 0,
//	READY,
//	SERVER_CONNECT,
//	DATA_EXCHAGE,
//}enum_wmmp_state;

typedef struct _WmmpState
{
	char *serverip;
	char *serverport;
	int	 enumSocketType;	/* 0:tcp  1:udp */
	//enum_wmmp_state mainState;
} Wmmp;

enum ENUM_BR_TYPE
{
	BR_TYPE_CSD 		= 0, /* __APL_BR_CSD__ */
	BR_TYPE_SMS 		= 1, /* __APL_BR_SMS__ */
	BR_TYPE_USSD 		= 2, /* __APL_BR_USSD__ */
	BR_TYPE_UART 		= 3, /* __APL_BR_UART__ */
	BR_TYPE_GPRS 		= 4, /* __APL_BR_GPRS__ */
	BR_TYPE_APL_MAX,
	BR_TYPE_NOT_EXIST 	= 0xFF
};

enum ENUM_WMMP_BEARER_STATUS
{
	WMMP_BEARER_ST_CLOSED 		= 0,
	WMMP_BEARER_ST_OPENING 		= 1,
	WMMP_BEARER_ST_CONNECTED 	= 2,
	WMMP_BEARER_ST_CLOSING 		= 3,
	WMMP_BEARER_ST_REOPENING 	= 4,
	WMMP_BEARER_ST_MAX
};

enum ENUM_WMMP_BEARER_CHANNEL_PROTOCOL
{
	WMMP_BEARER_CHANNEL_PROTO_APP = 0,
	WMMP_BEARER_CHANNEL_PROTO_UDP = 1,
	WMMP_BEARER_CHANNEL_PROTO_TCP = 2,
	WMMP_BEARER_CHANNEL_PROTO_MAX
};

enum ENUM_WMMP_BEARER_CHANNEL_STATUS
{
	WMMP_BEARER_CHANNEL_ST_CLOSED 		= 0,
	WMMP_BEARER_CHANNEL_ST_OPENING 		= 1,
	WMMP_BEARER_CHANNEL_ST_CONNECTED 	= 2,
	WMMP_BEARER_CHANNEL_ST_MAX
};

enum ENUM_WMMP_STATE
{
	WMMP_STATE_NOTINIT 							= 0x0000,
	WMMP_STATE_READY_FOR_SIM_CHANGE 			= 0x0001,
	WMMP_STATE_AT_READY 						= 0x0002,
	WMMP_STATE_INIT_START 						= 0x0010,
	WMMP_STATE_INIT_BEARER 						= 0x0011,
	WMMP_STATE_DETACH_BEARER 					= 0x0012,
	WMMP_STATE_NEWTORK_WAITING 					= 0x0013,
	WMMP_STATE_LINK_READY 						= 0x0020,
	WMMP_STATE_REGISTERING_NO_TERMID_BEGIN 		= 0x0100,
	WMMP_STATE_REGISTERING_TERMID_BEGIN 		= 0x0101,
	WMMP_STATE_REGISTERING_TERMID_ACCESSKEY_BASEKEY_BEGIN = 0x0201,
	WMMP_STATE_REGISTERING_WAIT_SECURITY_AUXDATA = 0x0202,
	WMMP_STATE_REGISTERING_TERMID_SIMBIND_BEGIN = 0x0203,
	WMMP_STATE_REGISTERED_WAIT_LOGIN 			= 0x0300,
	WMMP_STATE_LOGGING_IN_FIRST_TIME 			= 0x0301,
	WMMP_STATE_LOGGING_IN_NORMAL 				= 0x0302,
	WMMP_STATE_LOGGING_IN_SIMPIN_CLEARED 		= 0x0303,
	WMMP_STATE_LOGGEDIN_TRAPPING_CONFIG 		= 0x0401,
	WMMP_STATE_LOGGEDIN_TRAPPING_EMPTY 			= 0x0402,
	WMMP_STATE_LOGGEDIN 						= 0x0500,
	WMMP_STATE_LOGGING_OUT_BEGIN 				= 0x0501,
	WMMP_STATE_ABNORMAL_UNKNOWN 				= 0x0600,
	WMMP_STATE_ABNORMAL_LOGIN_RETRYING 			= 0x0601,
	WMMP_STATE_ABNORMAL_LOGGING_OUT 			= 0x0602,
	WMMP_STATE_ALARM_MSK 						= 0x0700,
	WMMP_STATE_REBINDING_KEY_CLEARED 			= 0x0900,
	WMMP_STATE_REBINDING_WAIT_SECURITY_AUXDATA 	= 0x0901,
	WMMP_STATE_REBINDING_WAIT_SECURITY_ECDATA 	= 0x0902,
	WMMP_STATE_REBINDING_CKEY_ONLY 				= 0x0903,
	WMMP_STATE_REBINDING_WAIT_SIM_READY 		= 0x0904,
	WMMP_STATE_REBINDING_PIN1_APPLY 			= 0x0905,
	WMMP_STATE_REBINDING_PIN2_APPLY 			= 0x0906,
	WMMP_STATE_REBINDING_PIN1_CLEAR 			= 0x0907,
	WMMP_STATE_REBINDING_PIN2_CLEAR 			= 0x0908,
	WMMP_STATE_TERMINATING 						= 0x0A02,
	WMMP_STATE_MAX
};

enum ENUM_WMMP_AT_ERROR
{
	WMMP_AT_ERR_NONE 					= 900,
	WMMP_AT_ERR_UNKNOWN 				= 901,
	WMMP_AT_ERR_INVALID_PARAM 			= 902,
	WMMP_AT_ERR_DATALEN_OVER 			= 903,
	WMMP_AT_ERR_INVALID_TLV 			= 904,
	WMMP_AT_ERR_INVALID_TAG 			= 905,
	WMMP_AT_ERR_BEARER_NA 				= 906,
	WMMP_AT_ERR_CONNECTION_NA 			= 907,
	WMMP_AT_ERR_EC_ABSENT 				= 908,
	WMMP_AT_ERR_EC_DISABLED 			= 909,
	WMMP_AT_ERR_BUSY 					= 910,
	WMMP_AT_ERR_NOT_REGISTERED 			= 911,
	WMMP_AT_ERR_NOT_LOGGED_IN 			= 912,
	WMMP_AT_ERR_TLV_NOT_ALLOWED 		= 913,
	WMMP_AT_ERR_ACK_TIMEOUT 			= 914,
	WMMP_AT_ERR_NOT_INITED 				= 950,
	WMMP_AT_ERR_ALREADY_STARTED 		= 951,
	WMMP_AT_ERR_ALARMED 				= 952,
	WMMP_AT_ERR_SIM_CHANGE_NOT_INITED 	= 953,
	WMMP_AT_ERR_PIN1_REQUIRED 			= 954,
	WMMP_AT_ERR_PUK1_REQUIRED 			= 955,
	WMMP_AT_ERR_CRC_ERROR 				= 956,
	WMMP_AT_ERR_INVALID_PWD 			= 957,
	WMMP_AT_ERR_EXCEEDED_MAX 			= 958,
	WMMP_AT_ERR_SIMBIND_REJECTED 		= 959,
	WMMP_AT_ERR_SIMBIND_FAILED 			= 960,
	WMMP_AT_ERR_TRANS_DATA_ACK_BASE 	= 980,
	WMMP_AT_ERR_TRANS_DATA_ACK_DESTOFFLINE 	= WMMP_AT_ERR_TRANS_DATA_ACK_BASE+0,
	WMMP_AT_ERR_TRANS_DATA_ACK_DESTINVALID 	= WMMP_AT_ERR_TRANS_DATA_ACK_BASE+1,
	WMMP_AT_ERR_TRANS_DATA_ACK_REJECTED 	= WMMP_AT_ERR_TRANS_DATA_ACK_BASE+2,
	WMMP_AT_ERR_TRANS_DATA_ACK_CRCFAILED 	= WMMP_AT_ERR_TRANS_DATA_ACK_BASE+3,
	WMMP_AT_ERR_FILE_REQ_ACK_BASE 		= 985,
	WMMP_AT_ERR_FILE_REQ_ACK_ILLEGAL_TRANSID 	= WMMP_AT_ERR_FILE_REQ_ACK_BASE+0,
	WMMP_AT_ERR_FILE_REQ_ACK_ILLEGAL_READPOINT 	= WMMP_AT_ERR_FILE_REQ_ACK_BASE+1,
	WMMP_AT_ERR_FILE_REQ_ACK_ILLEGAL_BLOCKSIZE 	= WMMP_AT_ERR_FILE_REQ_ACK_BASE+2,
	WMMP_AT_ERR_SECCONFIGACK_BASE 		= 990,
	WMMP_AT_ERR_SECCONFIGACK_DECRYPT_FAILED = WMMP_AT_ERR_SECCONFIGACK_BASE+0,
	WMMP_AT_ERR_SECCONFIGACK_INVALID_TLV	= WMMP_AT_ERR_SECCONFIGACK_BASE+1,
	WMMP_AT_ERR_SECCONFIGACK_REJECTED 		= WMMP_AT_ERR_SECCONFIGACK_BASE+2,
	WMMP_AT_ERR_SECCONFIGACK_SIM_PIN_DIGEST = WMMP_AT_ERR_SECCONFIGACK_BASE+3,
	WMMP_AT_ERR_MAX
};

enum ENUM_WMMP_EVENT_ACK
{
	WMMP_EVT_CONFIG_TRAP_ACK			= 0x01,
	WMMP_EVT_CONFIG_REQ_ACK 			= 0x02,
	WMMP_EVT_TRANS_DATA_ACK 			= 0x03,
	WMMP_EVT_TRANS_CMD_ACK 				= 0x04,
	WMMP_EVT_FILE_REQ_ACK 				= 0x05,
	WMMP_EVT_CONFIG_MANSET_ACK 			= 0x06,
	WMMP_EVT_SEC_CONFIG_ACK 			= 0x07,
};

enum ENUM_WMMP_EVENT_MSG
{
	WMMP_EVT_INITIATED_MSG 				= 0x80,
	WMMP_EVT_TERMINATED_MSG 			= 0x81,
	WMMP_EVT_STATE_MSG 					= 0x82,
	WMMP_EVT_BEARER_SRV_MSG 			= 0x83,
	WMMP_EVT_BEARER_CHANNEL_MSG 		= 0x84,
	WMMP_EVT_REGISTER_MSG 				= 0x85,
	WMMP_EVT_LOGIN_MSG 					= 0x86,
	WMMP_EVT_LOGOUT_MSG 				= 0x87,
	WMMP_EVT_CONFIG_GET_MSG 			= 0x88,
	WMMP_EVT_CONFIG_SET_MSG 			= 0x89,
	WMMP_EVT_REMOTE_CTRL_MSG 			= 0x8A,
	WMMP_EVT_TRANS_DATA_MSG 			= 0x8B,
	WMMP_EVT_DOWNLOAD_INFO_MSG 			= 0x8C,
	WMMP_EVT_TRANSCMD_CONFIG_TRAP_ACK 	= 0xC0,
	WMMP_EVT_TRANSCMD_CONFIG_REQ_ACK 	= 0xC1,
	WMMP_EVT_TRANSCMD_CONFIG_GET_ACK 	= 0xC2,
	WMMP_EVT_TRANSCMD_CONFIG_SET_ACK 	= 0xC3,
	WMMP_EVT_TRANSCMD_REMOTE_CTRL_ACK 	= 0xC4,
	WMMP_EVT_TRANSCMD_REQ_TIMEOUT_MSG 	= 0xD0,
	WMMP_EVT_TRANSCMD_CONFIG_TRAP_MSG 	= 0xD1,
	WMMP_EVT_TRANSCMD_CONFIG_REQ_MSG 	= 0xD2,
	WMMP_EVT_TRANSCMD_CONFIG_GET_MSG 	= 0xD3,
	WMMP_EVT_TRANSCMD_CONFIG_SET_MSG 	= 0xD4,
	WMMP_EVT_TRANSCMD_REMOTE_CTRL_MSG 	= 0xD5,
};

enum ENUM_WMMP_ALARM_CODE
{
	WMMP_ALARM_SMS_CONNECTION 			= 0x0001,
	WMMP_ALARM_USSD_CONNECTION 			= 0x0002,
	WMMP_ALARM_GPRS_CONNECTION			= 0x0003,
	WMMP_ALARM_GPRS_CAN_NOT_OPEN		= 0x0004,
	WMMP_ALARM_GPS_ERROR				= 0x0005,
	WMMP_ALARM_SELF_POST_ERROR			= 0x0006,
	WMMP_ALARM_SMS_TIMEOUT 				= 0x0007,
	WMMP_ALARM_POWER_ERROR 				= 0x0008,
	WMMP_ALARM_EXCEED_LIMITED 			= 0x0009,
	WMMP_ALARM_UPDATE_ERROR 			= 0x000A,
	WMMP_ALARM_SIGNAL_WEAK	 			= 0x000B,
	WMMP_ALARM_DIALUP_ERROR 			= 0x000C,
	WMMP_ALARM_BIT_ERRORRATE 			= 0x000D,
	WMMP_ALARM_PLATFORM_CONNECTION 		= 0x000E,
	WMMP_ALARM_UNRECEIVE_ANY_PACKET 	= 0x000F,
	WMMP_ALARM_PROTOCOL_VERSION		 	= 0x0010,
	WMMP_ALARM_RAM_ERROR			 	= 0x0011,
	WMMP_ALARM_APP_FILE_ERROR		 	= 0x0012,
	WMMP_ALARM_APP_SERVER_CONNECTION 	= 0x0013,
	WMMP_ALARM_MONITOR_SERVER_CONNECTION= 0x0014,
	WMMP_ALARM_PRINTER_ERROR			= 0x0015,
	WMMP_ALARM_BARCODE					= 0x0016,
	WMMP_ALARM_CARD_READER_ERROR		= 0x0017,
	WMMP_ALARM_IC_CARD_READER_ERROR 	= 0x0018,
	WMMP_ALARM_PIN_PAD_ERROR			= 0x0019,
	WMMP_ALARM_EXTERNAL_PHONE_ERROR		= 0x001A,
	WMMP_ALARM_UPDATE_FAILED			= 0x001B,
	WMMP_ALARM_SMS_RECEIVE_TIMEOUT		= 0x001C,
};

typedef enum RESPONSE_TYPE
{
	RESPONSE_OK	 = 0,
	RESPONSE_ERROR,
	RESPONSE_ERROR_NUM,
	RESPONSE_ERROR_CME,
	RESPONSE_ERROR_CMS,
	RESPONSE_WMMP_ASYNC_OK,
	RESPONSE_WMMP_CMD,
	RESPONSE_WMMP_CMD_OK,
	RESPONSE_WMMP_ERROR,
	RESPONSE_WMMP_ACK,
	RESPONSE_WMMP_ACK_OK,
	RESPONSE_WMMP_ACK_ERROR,
	RESPONSE_WMMP_MSG,  //12
	RESPONSE_WMMP_SEND_MSG, //13  add by yy 20110819
	RESPONSE_DEVICE_BUSY ,
	RESPONSE_DEVICE_NO_ANSWER,
	RESPONSE_DEVICE_NO_CARRIER,
	RESPONSE_DEVICE_NO_DIALTONE,
	RESPONSE_DEVICE_RING,
	RESPONSE_PROMPT,
	RESPONSE_UNKOWN,
}t_enumResponseType;

typedef enum RECEIVE_STATE
{
	RECV_STATE_IDLE,
	RECV_STATE_WAIT_END_TAG,
	RECV_STATE_END_TAG_DETECTED,
	RECV_STATE_POST_PROCESS,
}t_enumReceiveState;

typedef enum WMMP_STATE
{
	WMMP_STATE_UNKOWN,
	WMMP_STATE_INIT,
	WMMP_STATE_CMD_SEND,
	WMMP_STATE_WAIT_RESPONSE,
	WMMP_STATE_WAIT_ASYC_ACK,
	WMMP_STATE_GOT_MSG
}t_enumWmmpState;

#define WMMP_RX_BUF_LEN		8192				//8K byte
#define WMMP_MAX_LINE		64

typedef struct
{
	char buf[WMMP_RX_BUF_LEN];
	char *buf_head;
	char *buf_tail;
	//volatile unsigned int u32BufHead,u32BufTail;
	volatile int rxlen;
	char *line[WMMP_MAX_LINE];
	int	 lines;
	t_enumReceiveState enumReceiveState;
	t_enumResponseType enumResponseType;
}t_wmmp_rx_buf;



void wmmp_apiTest(void);

int wmmp_init(void);
int wmmp_setAppServer(int flowID, const char *server_ip, const char *port);
int wmmp_openAppFlow(int flowID);
int wmmp_closeAppFlow(int flowID);
int wmmp_sendAppData(int flowID, char *buf, int len);
int wmmp_readAppData(int flowID, char *buf, int *len);
int wmmp_trapAlarmCode(unsigned short usAlarmCode);
int wmmp_readAppVer(char *appver);
int wmmp_setAPN(char *s_APNtag, const char *s_APNvalue);

#ifdef __cplusplus
}
#endif

#endif /* WMMP_H_ */
