     /* Generated by Together */

#include "CaScrollGroup.h"

#include"LOGCTRL.h"
#include"pos_debug.h"

CaScrollGroup::CaScrollGroup(int type, int InnerObjNum):CaGroup(type)
{
	 m_iInnerObjNum = InnerObjNum;
	 m_iRowCount=0;
	 m_iDispRowCount=0; 
	 m_iCurRowIndex=0;
	 m_iColCount=1;
	 m_iCurColIndex=0;
	 m_iCurScrRowIndex=0;
	 InnerObjNum = 0;
	 m_pScrollBar=NULL;
	 m_iScrollBarPos=RIGTH_SCROLL_BAR;
	 m_iRowH=DEFAULT_ROW_H;
	 m_iColW=DEFAULT_COL_W;
	 m_iScrollBarW=DEFAULT_BAR_W;
	 m_iRowInterval=DEFAULT_ROW_INTERVAL;
     m_iColInterval=DEFAULT_COL_INTERVAL;
}
CaScrollGroup::~CaScrollGroup()
{
	//CaGroup::~CaGroup();
}

void CaScrollGroup::ReCreateFocusList()
{
	 CaGroup::ReCreateFocusList();
	 DBG_ASSERT_EXIT(m_iColCount >0 ,("m_iColCount=%d is zero",m_iColCount));
	 
	 m_iRowCount= m_iFocusObjCount/m_iColCount;
	 m_iRowCount= m_iFocusObjCount%m_iColCount >0 ? 
					m_iRowCount+1: m_iRowCount;
	 m_iCurRowIndex=0;
	 m_iCurScrRowIndex=0;
}

int  CaScrollGroup::Create(int iX,int iY,int iW,int iH)
{
	int res= CaGroup::Create(iX,iY,iW,iH);
	m_iColW=(m_iW-m_iScrollBarW-(m_iColCount+1)*m_iColInterval)/m_iColCount ;
	return res;
}
int  CaScrollGroup::ProcEvent(int iEvent,unsigned char *pEventData, int iDataLen)
{
	return CaGroup::ProcEvent(iEvent,pEventData,iDataLen);
}
void CaScrollGroup::DrawDispRows()
{
	if(FocusObjCount() <= 0 )
	{
		return ;
	}
	CaObject*const* a =  FocusObjList();
	int i=0,j=0,col=0;
	int dispStart=0;
//	if (m_iInnerObjNum != 0 && 
//		m_iCurRowIndex >= m_iRowCount-m_iDispRowCount-m_iInnerObjNum+1)
//	{
//		dispStart=(m_iRowCount-m_iDispRowCount-m_iInnerObjNum+1) > 0 ? (m_iRowCount-m_iDispRowCount-m_iInnerObjNum+1):0;
//	}
//	else
//	{
//		dispStart=(m_iCurRowIndex-m_iCurScrRowIndex)<0 ? 0 : (m_iCurRowIndex-m_iCurScrRowIndex);
//	}

	if (m_iInnerObjNum != 0 
		&& (m_iCurRowIndex >= m_iRowCount-m_iInnerObjNum
		|| m_iCurRowIndex >= m_iRowCount-m_iDispRowCount-m_iInnerObjNum+1))
	{
		dispStart=m_iRowCount-m_iInnerObjNum-m_iDispRowCount+1;
	}
	else
	{
		dispStart=m_iCurRowIndex-m_iCurScrRowIndex;
	}

	if (dispStart < 0)
	{
		dispStart = 0;
	}

	m_iColW=(m_iW-m_iScrollBarW-(m_iColCount+1)*m_iColInterval)/m_iColCount ;

	int numtmp=0;
	CaObject *pObj;
	if(m_iFocusObjCount == 1 )
	{
		return;		
	}
	if(m_iRowCount > m_iDispRowCount )
	{
		for (i=0; i < m_iFocusObjCount; i++)
		{
			 a[i]->Visible(false);
		}
	}
	for(i=dispStart,j=0 ;j<m_iDispRowCount;j++,i++)
	{
		if(dispStart+j+1 > m_iRowCount )
		{
			break;
		}
		for(col=0;col<m_iColCount;col++)
		{
			if( i*m_iColCount +col +1 > FocusObjCount() )
			{
				break;
			}

			pObj=a[i*m_iColCount+col];
			 
			if (pObj->m_iType == CA_BUTTON_INNER)
			{	
				numtmp =0;
				for(int tmp=m_iRowCount-m_iInnerObjNum; tmp<m_iRowCount; tmp++)
				{
					pObj=a[tmp];
					pObj->m_iX=numtmp*m_iColW/m_iInnerObjNum+4;
					pObj->m_iY=(  (m_iRowCount-m_iInnerObjNum +1) > m_iDispRowCount?  (m_iDispRowCount-1):(m_iRowCount-m_iInnerObjNum) )*m_iRowH+m_iRowInterval+4;
					pObj->m_iY += 2;		//add by ZL for awe4000r
					numtmp++;
					a[tmp]->Visible(true);
				}
			}
			else
			{
				pObj->m_iX=this->m_iX+col*m_iColW+m_iColInterval*(col+1); 
				pObj->m_iY=this->m_iY+j*m_iRowH+m_iRowInterval; 
				a[i*m_iColCount+col]->Visible(true);
			}
		}
	}
}

int  CaScrollGroup::ReFresh(void)
{
	ClearDisp();
	DrawDispRows();
	return CaGroup::ReFresh();
}
int  CaScrollGroup::SetFocus(void)
{
	return CaGroup::SetFocus();
}
void CaScrollGroup::End(void)
{
	ReCreateFocusList();
	DrawScrollBar();
	CaGroup::End();
}	
int CaScrollGroup::OnLeftKey()
{
//  	if(m_iRowCount <= m_iDispRowCount )
//	{
//		return CaGroup::OnUpKey();
//	}
		if(FocusObjCount() <= 0 )
	{
		return 0;
	}
    CaObject*const* a = FocusObjList();
	bool refresh=false;
	int oldRowIndex=m_iCurRowIndex;
	int n=FindFocusObj(m_pCurObj);
	
	if( m_iColCount > 1 && ((n+1)%m_iColCount) !=1 )
	{
		m_pCurObj->ReFresh();
		int d=n-1 >= 0 ? n-1 : 0;
		m_pCurObj=a[d];
		m_pCurObj->SetFocus();
		return 1;
	}

	if(m_iCurRowIndex == 0)
	{
		m_iCurRowIndex=m_iRowCount-1;
		if(m_iRowCount > m_iDispRowCount)
		{
			m_iCurScrRowIndex=m_iDispRowCount-1; 			
			DrawDispRows();
			refresh=true;

		}
		else
		{
			m_iCurScrRowIndex=m_iCurRowIndex; 			
		}
	}
	else
	{
		m_iCurRowIndex--;
		if(m_iCurScrRowIndex == 0)
		{
			DrawDispRows();
			refresh=true;
		}
		else
		{
			m_iCurScrRowIndex--;
		}
	}
	if(m_iRowCount > m_iDispRowCount )
	{
		DBG_ASSERT_EXIT(m_pScrollBar != NULL,("m_pScrollBar is NULL "));
		m_pScrollBar->CurIndex(m_iCurRowIndex);
		m_pScrollBar->ReFresh();
	}
	n= n==0 ? m_iFocusObjCount-1 : n-1;	
	n= n >=0 ? n : 0 ;
	//m_pCurObj=a[n];
	m_pCurObj=m_iFocusObjCount > 1 ? a[n] : m_pCurObj;
//	if(refresh)
	{
		ReFresh();
	}
	SetFocus();
	return 1;

}
int CaScrollGroup::OnRightKey()
{
//  	if(m_iRowCount <= m_iDispRowCount )
//	{
//		return CaGroup::OnDownKey();
//	}
	if(FocusObjCount() <= 0 )
	{
		return 0;
	}
	bool refresh=false;
	int oldRowIndex=m_iCurRowIndex;
    CaObject*const* a = FocusObjList();
	int n=FindFocusObj(m_pCurObj);
	if( m_iColCount > 1 && (n+1)%m_iColCount !=0 && n < m_iFocusObjCount-1)
	{
		m_pCurObj->ReFresh();
		m_pCurObj=a[n+1];
		m_pCurObj->SetFocus();
		return 1;
	}

	if(m_iCurRowIndex == m_iRowCount-1)
	{
		m_iCurRowIndex=0;
		m_iCurScrRowIndex=0;
		if(m_iRowCount > m_iDispRowCount)
		{
			DrawDispRows();
			refresh=true;
		}

	}
	else
	{
		m_iCurRowIndex++;
		if(m_iRowCount > m_iDispRowCount)
		{
			if(m_iCurScrRowIndex == m_iDispRowCount -1 )
			{
				DrawDispRows();
				refresh=true;
			}
			else
			{
				m_iCurScrRowIndex++;
			}
		}
		else
		{
			m_iCurScrRowIndex++;
		}

	}
	if(m_iRowCount > m_iDispRowCount )
	{
		DBG_ASSERT_EXIT(m_pScrollBar != NULL,("m_pScrollBar is NULL "));
		m_pScrollBar->CurIndex(m_iCurRowIndex);
		m_pScrollBar->ReFresh();
	}
	m_pCurObj->ReFresh();
	n= (n >= m_iFocusObjCount-1 ) ? 0 : n+1;
	//m_pCurObj=a[n];
	m_pCurObj=m_iFocusObjCount > 1 ? a[n] : m_pCurObj;

//	if(refresh)
	{
		ReFresh();
	}
	SetFocus();
	return 1;
}
int CaScrollGroup::OnUpKey()
{
	if(FocusObjCount() <= 0 )
	{
		return 0;
	}
	if(m_iRowCount == 1 )
	{
		return CaGroup::OnUpKey();
	}

	bool refresh=false;
	int oldRowIndex=m_iCurRowIndex;
    CaObject*const* a = FocusObjList();
	int n=FindFocusObj(m_pCurObj);

	if(m_iCurRowIndex == 0)
	{
		m_iCurRowIndex=m_iRowCount-1;
		if(m_iRowCount > m_iDispRowCount )
		{
			m_iCurScrRowIndex=m_iDispRowCount-1;
			DrawDispRows();
			refresh=true;
		}
		else
		{
			m_iCurScrRowIndex=m_iCurRowIndex;
		}

	}
	else
	{
		m_iCurRowIndex--;
		if(m_iCurScrRowIndex == 0)
		{
			DrawDispRows();
			refresh=true;
		}
		else
		{
			m_iCurScrRowIndex--;
		}
	}

    if(m_iRowCount > m_iDispRowCount )
	{
		DBG_ASSERT_EXIT(m_pScrollBar != NULL,("m_pScrollBar is NULL "));
		m_pScrollBar->CurIndex(m_iCurRowIndex);
		m_pScrollBar->ReFresh();
	}

	if(oldRowIndex >0 )
	{
		m_pCurObj->ReFresh();
		int d=n-m_iColCount >=0 ? n-m_iColCount:0;
		m_pCurObj=a[d];
	}
	else //oldRowIndex==0
	{

	//	int n=FindFocusObj(m_pCurObj);
		DBG_ASSERT_EXIT(n<m_iColCount,
			("n=%d >= m_iColCount=%d error!",n,m_iColCount));
		int mod = m_iFocusObjCount%m_iColCount;
		    mod = (mod == 0) ? m_iColCount : mod;
		int d= mod-n-1 >=0 ? mod-n-1 : 0 ;
		
		m_pCurObj->ReFresh();
		m_pCurObj=a[m_iFocusObjCount-1-d];
	}

//	if(refresh)
	{
		ReFresh();
	}
	SetFocus();
	return 1;
}
int CaScrollGroup::OnDownKey()
{
	if(FocusObjCount() <= 0 )
	{
		return 0;
	}
	if(m_iRowCount == 1 )
	{
		return CaGroup::OnDownKey();
	}
	bool refresh=false;
	int oldRowIndex=m_iCurRowIndex;
	int n=FindFocusObj(m_pCurObj);
    CaObject*const* a = FocusObjList();

	if(m_iCurRowIndex >= m_iRowCount-1 )
	{
		m_iCurRowIndex=0;
		m_iCurScrRowIndex=0;
		if(m_iRowCount >m_iDispRowCount)
		{
			DrawDispRows();
			refresh=true;
		}
	}
	else
	{
		m_iCurRowIndex++;
		if(m_iRowCount > m_iDispRowCount)
		{
			if(m_iCurScrRowIndex == m_iDispRowCount-1 )
			{
				DrawDispRows();
				refresh=true;
			}
			else
			{
				m_iCurScrRowIndex++;
			}
		}
		else
		{
			m_iCurScrRowIndex=m_iCurRowIndex;
		}

	}
	if(m_iRowCount >m_iDispRowCount)
	{
		DBG_ASSERT_EXIT(m_pScrollBar != NULL,("m_pScrollBar is NULL "));
		m_pScrollBar->CurIndex(m_iCurRowIndex);
		m_pScrollBar->ReFresh();
	}

	if(oldRowIndex < m_iRowCount-1)
	{
		m_pCurObj->ReFresh();
		int d=n+m_iColCount >= m_iFocusObjCount -1 ?
					m_iFocusObjCount-1 :n+m_iColCount;
		m_pCurObj=a[d];
	}
	else //oldRowIndex == m_iRowCount-1
	{
		int d = (n+1)%m_iColCount == 0 ? m_iColCount : (n+1)%m_iColCount;
		d= d>0 ? d:1;
		m_pCurObj->ReFresh();
		m_pCurObj=a[d-1];
	}
//	if(refresh)
	{
		ReFresh();
	}
	SetFocus();
	return 1;	
}
void CaScrollGroup::DrawScrollBar()
{
	if(m_iDispRowCount <= 0 )
	{
		CalculateDispRowCount();
	}
	if(m_iScrollBarPos == NO_SCROLL_BAR)// || m_iRowCount <= m_iDispRowCount )
	{
		return ;
	}

	if(m_pScrollBar == NULL )
	{
		m_pScrollBar=new CaScrollBar();
		
		if(m_iScrollBarPos == RIGTH_SCROLL_BAR)
		{
			m_pScrollBar->Create(m_iX+m_iW-m_iScrollBarW,m_iY,m_iScrollBarW,m_iH);
		}
		else if( m_iScrollBarPos == LEFT_SCROLL_BAR )
		{
			m_pScrollBar->Create(m_iX,m_iY,m_iScrollBarW,m_iH);
		}
		else 
		{
			DBG_ASSERT_EXIT(false,("m_iScrollBarPos=%d value is invalid!"));
		}
	}

	if (m_iInnerObjNum != 0)
	{
	m_pScrollBar->TotalLines(m_iRowCount-m_iInnerObjNum+1);
	}
	else
	{
	m_pScrollBar->TotalLines(m_iRowCount);
	}
	
	m_pScrollBar->DispLines(m_iDispRowCount);
	m_pScrollBar->CurIndex(0);
}
void CaScrollGroup::DispRowCount(int c)
{
	m_iDispRowCount=c;
	CalculateRowH();
}
void CaScrollGroup::RowH(int h)
{
	m_iRowH=h;
	CalculateDispRowCount();
}

// Insure the scrollbars are the last children:
void CaScrollGroup::AdaptScrollbarOrder() {
  CaObject** a = (CaObject**)ObjList();
  if (a[ObjCount()-1] != m_pScrollBar ) 
  {
    int i=0,j=0; 
	for (i =j= 0; j < ObjCount(); j++)
	{
      if (a[j] != m_pScrollBar ) 
	  {
		  a[i++] = a[j];
	  }
	}
    a[i++] = m_pScrollBar;
  }
}

int  CaScrollGroup::CalculateRowH()
{
	DBG_ASSERT_EXIT(m_iH >= DEFAULT_ROW_H,("m_iH=%d is less than DEFAULT_ROW_H "));
	DBG_ASSERT_WARNING(m_iRowCount >= m_iDispRowCount ,
		("m_iRowCount=%d <= m_iDispRowCount=%d ",m_iRowCount,m_iDispRowCount));
	
	if(m_iH==DEFAULT_ROW_H )
	{
		m_iDispRowCount=1;
		m_iRowH=DEFAULT_ROW_H;
		m_iRowInterval=0;
	}
	else
	{
		DBG_ASSERT_EXIT(m_iDispRowCount>0 ,
			("m_iDispRowCount=%d is zero",m_iDispRowCount));
		m_iRowH = m_iH/m_iDispRowCount;
		if(m_iRowH < DEFAULT_ROW_H )
		{
			m_iDispRowCount--; 
			DBG_ASSERT_EXIT(m_iDispRowCount >0 ,
				("m_iDispRowCount=%d is less than zero",m_iDispRowCount));
			m_iRowH = (m_iH/m_iDispRowCount);
		}
		
	}
	return m_iRowH;
}

int  CaScrollGroup::CalculateDispRowCount()
{
	DBG_ASSERT_EXIT(m_iH >= WORD_H,("m_iH=%d is less than DEFAULT_ROW_H "));
	

	if(m_iH > DEFAULT_ROW_H)
	{
		DBG_ASSERT_EXIT(m_iRowH >0 ,("m_iRowH=%d is zero",m_iRowH));
		m_iDispRowCount = m_iH/m_iRowH;
		if(m_iDispRowCount == 1)
		{
			m_iRowH= m_iH;
		}
		
		m_iRowInterval =((m_iRowH-WORD_H) + (m_iH - m_iRowH*m_iDispRowCount))/(m_iDispRowCount+1);
	}
	else if(m_iH==DEFAULT_ROW_H )
	{
		m_iDispRowCount=1;
		m_iRowH=DEFAULT_ROW_H;
		m_iRowInterval= (m_iH-WORD_H)/2 == 0 ? 1 : (m_iH-WORD_H)/2 ;
	}

	else if(m_iH == WORD_H )
	{

	}
	return m_iDispRowCount;	
}

void CaScrollGroup::ReSetFocus()
{
	int oldRowIndex;CaObject*const* a = FocusObjList();
	while (m_iCurRowIndex)
	{
		oldRowIndex=m_iCurRowIndex;

	m_iCurRowIndex--;
	if(m_iCurScrRowIndex != 0)
	{
		m_iCurScrRowIndex--;
	}

	if(oldRowIndex >0 )
	{
		int d=m_iCurRowIndex-m_iColCount >=0 ? m_iCurRowIndex-m_iColCount:0;
		m_pCurObj=a[d];
	}
	else //oldRowIndex==0
	{
		DBG_ASSERT_EXIT(m_iCurRowIndex<m_iColCount,
			("n=%d >= m_iColCount=%d error!",m_iCurRowIndex,m_iColCount));
		int mod = m_iFocusObjCount%m_iColCount;
			mod = (mod == 0) ? m_iColCount : mod;
		int d= mod-m_iCurRowIndex-1 >=0 ? mod-m_iCurRowIndex-1 : 0 ;
		
		m_pCurObj=a[m_iFocusObjCount-1-d];
	}
	}
	
	if(m_iRowCount > m_iDispRowCount )
	{
		DBG_ASSERT_EXIT(m_pScrollBar != NULL,("m_pScrollBar is NULL "));
		m_pScrollBar->CurIndex(m_iCurRowIndex);
		m_pScrollBar->ReFresh();
	}

	ReFresh();
	SetFocus();
}

void CaScrollGroup::SetFocusToObj(const CaObject *targetObj, int BtnNumOfCol)
{
	CaObject*const* a = FocusObjList();
	int n=FindFocusObj(targetObj); 
	int oldRowIndex = m_iCurRowIndex;
	int distance = (n/m_iColCount) > m_iCurRowIndex ? (n/m_iColCount) - m_iCurRowIndex: m_iCurRowIndex-(n/m_iColCount);

	m_iCurRowIndex = (n/m_iColCount)<m_iCurRowIndex ? (m_iCurRowIndex - distance):(m_iCurRowIndex + distance);
	if (n/m_iColCount > oldRowIndex)
	{
		m_iCurScrRowIndex += distance%BtnNumOfCol;
		m_iCurScrRowIndex %= BtnNumOfCol;
	}
	else
	{
		m_iCurScrRowIndex = m_iCurScrRowIndex-distance%BtnNumOfCol < 0 ? 0 :m_iCurScrRowIndex-distance%BtnNumOfCol;
	}

	//	m_iCurRowIndex = n<m_iCurRowIndex ? (m_iCurRowIndex - distance):(m_iCurRowIndex + distance);
	//	m_iCurScrRowIndex = m_iCurScrRowIndex<distance ? 0 : m_iCurScrRowIndex-distance;

	m_pCurObj=a[n];
	if(m_iRowCount > m_iDispRowCount && ( n/m_iColCount != oldRowIndex || m_iColCount == 1))
	{
		DBG_ASSERT_EXIT(m_pScrollBar != NULL,("m_pScrollBar is NULL "));
		m_pScrollBar->CurIndex(n/m_iColCount);
		m_pScrollBar->ReFresh();
	}

	ReFresh();
	SetFocus();
}

//void CaScrollGroup::SetFocusToObj(const CaObject *targetObj)
//{
//	CaObject*const* a = FocusObjList();
//	int n=FindFocusObj(targetObj); 
//	int oldRowIndex = m_iCurRowIndex;
//	int distance = (n/m_iColCount) > m_iCurRowIndex ? (n/m_iColCount) - m_iCurRowIndex: m_iCurRowIndex-(n/m_iColCount);
//
//	m_iCurRowIndex = (n/m_iColCount)<m_iCurRowIndex ? (m_iCurRowIndex - distance):(m_iCurRowIndex + distance);
//	if (n/m_iColCount > oldRowIndex)
//	{
//		m_iCurScrRowIndex += distance%5;
//		m_iCurScrRowIndex %= 5;
//	}
//	else
//	{
//		m_iCurScrRowIndex = m_iCurScrRowIndex-distance%5 < 0 ? 0 :m_iCurScrRowIndex-distance%5;
//	}
//
//	//	m_iCurRowIndex = n<m_iCurRowIndex ? (m_iCurRowIndex - distance):(m_iCurRowIndex + distance);
//	//	m_iCurScrRowIndex = m_iCurScrRowIndex<distance ? 0 : m_iCurScrRowIndex-distance;
//
//	m_pCurObj=a[n];
//	if(m_iRowCount > m_iDispRowCount && ( n/m_iColCount != oldRowIndex || m_iColCount == 1))
//	{
//		DBG_ASSERT_EXIT(m_pScrollBar != NULL,("m_pScrollBar is NULL "));
//		m_pScrollBar->CurIndex(n/m_iColCount);
//		m_pScrollBar->ReFresh();
//	}
//
//	ReFresh();
//	SetFocus();
// }
